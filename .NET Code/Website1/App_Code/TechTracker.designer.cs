#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TechInventory")]
public partial class TechInventoryDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertArea(Area instance);
  partial void UpdateArea(Area instance);
  partial void DeleteArea(Area instance);
  partial void InsertBldg(Bldg instance);
  partial void UpdateBldg(Bldg instance);
  partial void DeleteBldg(Bldg instance);
  partial void InsertDept(Dept instance);
  partial void UpdateDept(Dept instance);
  partial void DeleteDept(Dept instance);
  partial void InsertEquipType(EquipType instance);
  partial void UpdateEquipType(EquipType instance);
  partial void DeleteEquipType(EquipType instance);
  partial void InsertMfg(Mfg instance);
  partial void UpdateMfg(Mfg instance);
  partial void DeleteMfg(Mfg instance);
  partial void InsertModel(Model instance);
  partial void UpdateModel(Model instance);
  partial void DeleteModel(Model instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertEquipment(Equipment instance);
  partial void UpdateEquipment(Equipment instance);
  partial void DeleteEquipment(Equipment instance);
  #endregion
	
	public TechInventoryDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TechInventoryConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public TechInventoryDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TechInventoryDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TechInventoryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TechInventoryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Area> Areas
	{
		get
		{
			return this.GetTable<Area>();
		}
	}
	
	public System.Data.Linq.Table<Bldg> Bldgs
	{
		get
		{
			return this.GetTable<Bldg>();
		}
	}
	
	public System.Data.Linq.Table<Dept> Depts
	{
		get
		{
			return this.GetTable<Dept>();
		}
	}
	
	public System.Data.Linq.Table<EquipType> EquipTypes
	{
		get
		{
			return this.GetTable<EquipType>();
		}
	}
	
	public System.Data.Linq.Table<Mfg> Mfgs
	{
		get
		{
			return this.GetTable<Mfg>();
		}
	}
	
	public System.Data.Linq.Table<Model> Models
	{
		get
		{
			return this.GetTable<Model>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Equipment> Equipments
	{
		get
		{
			return this.GetTable<Equipment>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Area")]
public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AreaID;
	
	private string _AreaName;
	
	private EntitySet<User> _Users;
	
	private EntitySet<Equipment> _Equipments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaIDChanging(int value);
    partial void OnAreaIDChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    #endregion
	
	public Area()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AreaID
	{
		get
		{
			return this._AreaID;
		}
		set
		{
			if ((this._AreaID != value))
			{
				this.OnAreaIDChanging(value);
				this.SendPropertyChanging();
				this._AreaID = value;
				this.SendPropertyChanged("AreaID");
				this.OnAreaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string AreaName
	{
		get
		{
			return this._AreaName;
		}
		set
		{
			if ((this._AreaName != value))
			{
				this.OnAreaNameChanging(value);
				this.SendPropertyChanging();
				this._AreaName = value;
				this.SendPropertyChanged("AreaName");
				this.OnAreaNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_User", Storage="_Users", ThisKey="AreaID", OtherKey="AreaID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Equipment", Storage="_Equipments", ThisKey="AreaID", OtherKey="AreaID")]
	public EntitySet<Equipment> Equipments
	{
		get
		{
			return this._Equipments;
		}
		set
		{
			this._Equipments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Area = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Area = null;
	}
	
	private void attach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Area = this;
	}
	
	private void detach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Area = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bldg")]
public partial class Bldg : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _BldgID;
	
	private string _BldgName;
	
	private EntitySet<Equipment> _Equipments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBldgIDChanging(string value);
    partial void OnBldgIDChanged();
    partial void OnBldgNameChanging(string value);
    partial void OnBldgNameChanged();
    #endregion
	
	public Bldg()
	{
		this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BldgID", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string BldgID
	{
		get
		{
			return this._BldgID;
		}
		set
		{
			if ((this._BldgID != value))
			{
				this.OnBldgIDChanging(value);
				this.SendPropertyChanging();
				this._BldgID = value;
				this.SendPropertyChanged("BldgID");
				this.OnBldgIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BldgName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string BldgName
	{
		get
		{
			return this._BldgName;
		}
		set
		{
			if ((this._BldgName != value))
			{
				this.OnBldgNameChanging(value);
				this.SendPropertyChanging();
				this._BldgName = value;
				this.SendPropertyChanged("BldgName");
				this.OnBldgNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bldg_Equipment", Storage="_Equipments", ThisKey="BldgID", OtherKey="BldgID")]
	public EntitySet<Equipment> Equipments
	{
		get
		{
			return this._Equipments;
		}
		set
		{
			this._Equipments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Bldg = this;
	}
	
	private void detach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Bldg = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dept")]
public partial class Dept : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _DeptID;
	
	private string _DeptName;
	
	private EntitySet<User> _Users;
	
	private EntitySet<Equipment> _Equipments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeptIDChanging(string value);
    partial void OnDeptIDChanged();
    partial void OnDeptNameChanging(string value);
    partial void OnDeptNameChanged();
    #endregion
	
	public Dept()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string DeptID
	{
		get
		{
			return this._DeptID;
		}
		set
		{
			if ((this._DeptID != value))
			{
				this.OnDeptIDChanging(value);
				this.SendPropertyChanging();
				this._DeptID = value;
				this.SendPropertyChanged("DeptID");
				this.OnDeptIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string DeptName
	{
		get
		{
			return this._DeptName;
		}
		set
		{
			if ((this._DeptName != value))
			{
				this.OnDeptNameChanging(value);
				this.SendPropertyChanging();
				this._DeptName = value;
				this.SendPropertyChanged("DeptName");
				this.OnDeptNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dept_User", Storage="_Users", ThisKey="DeptID", OtherKey="DeptID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dept_Equipment", Storage="_Equipments", ThisKey="DeptID", OtherKey="DeptID")]
	public EntitySet<Equipment> Equipments
	{
		get
		{
			return this._Equipments;
		}
		set
		{
			this._Equipments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Dept = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Dept = null;
	}
	
	private void attach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Dept = this;
	}
	
	private void detach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Dept = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipType")]
public partial class EquipType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EquipTypeID;
	
	private string _EquipTypeName;
	
	private EntitySet<Equipment> _Equipments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquipTypeIDChanging(int value);
    partial void OnEquipTypeIDChanged();
    partial void OnEquipTypeNameChanging(string value);
    partial void OnEquipTypeNameChanged();
    #endregion
	
	public EquipType()
	{
		this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EquipTypeID
	{
		get
		{
			return this._EquipTypeID;
		}
		set
		{
			if ((this._EquipTypeID != value))
			{
				this.OnEquipTypeIDChanging(value);
				this.SendPropertyChanging();
				this._EquipTypeID = value;
				this.SendPropertyChanged("EquipTypeID");
				this.OnEquipTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string EquipTypeName
	{
		get
		{
			return this._EquipTypeName;
		}
		set
		{
			if ((this._EquipTypeName != value))
			{
				this.OnEquipTypeNameChanging(value);
				this.SendPropertyChanging();
				this._EquipTypeName = value;
				this.SendPropertyChanged("EquipTypeName");
				this.OnEquipTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipType_Equipment", Storage="_Equipments", ThisKey="EquipTypeID", OtherKey="EquipTypeID")]
	public EntitySet<Equipment> Equipments
	{
		get
		{
			return this._Equipments;
		}
		set
		{
			this._Equipments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.EquipType = this;
	}
	
	private void detach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.EquipType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mfg")]
public partial class Mfg : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MfgID;
	
	private string _MfgName;
	
	private EntitySet<Model> _Models;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMfgIDChanging(int value);
    partial void OnMfgIDChanged();
    partial void OnMfgNameChanging(string value);
    partial void OnMfgNameChanged();
    #endregion
	
	public Mfg()
	{
		this._Models = new EntitySet<Model>(new Action<Model>(this.attach_Models), new Action<Model>(this.detach_Models));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MfgID
	{
		get
		{
			return this._MfgID;
		}
		set
		{
			if ((this._MfgID != value))
			{
				this.OnMfgIDChanging(value);
				this.SendPropertyChanging();
				this._MfgID = value;
				this.SendPropertyChanged("MfgID");
				this.OnMfgIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string MfgName
	{
		get
		{
			return this._MfgName;
		}
		set
		{
			if ((this._MfgName != value))
			{
				this.OnMfgNameChanging(value);
				this.SendPropertyChanging();
				this._MfgName = value;
				this.SendPropertyChanged("MfgName");
				this.OnMfgNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mfg_Model", Storage="_Models", ThisKey="MfgID", OtherKey="MfgID")]
	public EntitySet<Model> Models
	{
		get
		{
			return this._Models;
		}
		set
		{
			this._Models.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Models(Model entity)
	{
		this.SendPropertyChanging();
		entity.Mfg = this;
	}
	
	private void detach_Models(Model entity)
	{
		this.SendPropertyChanging();
		entity.Mfg = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Model")]
public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ModelID;
	
	private string _ModelName;
	
	private System.Nullable<int> _MfgID;
	
	private EntitySet<Equipment> _Equipments;
	
	private EntityRef<Mfg> _Mfg;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModelIDChanging(int value);
    partial void OnModelIDChanged();
    partial void OnModelNameChanging(string value);
    partial void OnModelNameChanged();
    partial void OnMfgIDChanging(System.Nullable<int> value);
    partial void OnMfgIDChanged();
    #endregion
	
	public Model()
	{
		this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
		this._Mfg = default(EntityRef<Mfg>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ModelID
	{
		get
		{
			return this._ModelID;
		}
		set
		{
			if ((this._ModelID != value))
			{
				this.OnModelIDChanging(value);
				this.SendPropertyChanging();
				this._ModelID = value;
				this.SendPropertyChanged("ModelID");
				this.OnModelIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string ModelName
	{
		get
		{
			return this._ModelName;
		}
		set
		{
			if ((this._ModelName != value))
			{
				this.OnModelNameChanging(value);
				this.SendPropertyChanging();
				this._ModelName = value;
				this.SendPropertyChanged("ModelName");
				this.OnModelNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MfgID", DbType="Int")]
	public System.Nullable<int> MfgID
	{
		get
		{
			return this._MfgID;
		}
		set
		{
			if ((this._MfgID != value))
			{
				if (this._Mfg.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMfgIDChanging(value);
				this.SendPropertyChanging();
				this._MfgID = value;
				this.SendPropertyChanged("MfgID");
				this.OnMfgIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Equipment", Storage="_Equipments", ThisKey="ModelID", OtherKey="ModelID")]
	public EntitySet<Equipment> Equipments
	{
		get
		{
			return this._Equipments;
		}
		set
		{
			this._Equipments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mfg_Model", Storage="_Mfg", ThisKey="MfgID", OtherKey="MfgID", IsForeignKey=true)]
	public Mfg Mfg
	{
		get
		{
			return this._Mfg.Entity;
		}
		set
		{
			Mfg previousValue = this._Mfg.Entity;
			if (((previousValue != value) 
						|| (this._Mfg.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Mfg.Entity = null;
					previousValue.Models.Remove(this);
				}
				this._Mfg.Entity = value;
				if ((value != null))
				{
					value.Models.Add(this);
					this._MfgID = value.MfgID;
				}
				else
				{
					this._MfgID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Mfg");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Model = this;
	}
	
	private void detach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.Model = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _UserUVID;
	
	private string _UserFName;
	
	private string _UserLName;
	
	private bool _FullTime;
	
	private string _Title;
	
	private string _PhoneExt;
	
	private string _HomePhone;
	
	private string _CellPhone;
	
	private System.Nullable<System.DateTime> _Bday;
	
	private string _Email;
	
	private string _DeptID;
	
	private System.Nullable<int> _AreaID;
	
	private EntitySet<Equipment> _Equipments;
	
	private EntityRef<Area> _Area;
	
	private EntityRef<Dept> _Dept;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserUVIDChanging(string value);
    partial void OnUserUVIDChanged();
    partial void OnUserFNameChanging(string value);
    partial void OnUserFNameChanged();
    partial void OnUserLNameChanging(string value);
    partial void OnUserLNameChanged();
    partial void OnFullTimeChanging(bool value);
    partial void OnFullTimeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPhoneExtChanging(string value);
    partial void OnPhoneExtChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnBdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBdayChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDeptIDChanging(string value);
    partial void OnDeptIDChanged();
    partial void OnAreaIDChanging(System.Nullable<int> value);
    partial void OnAreaIDChanged();
    #endregion
	
	public User()
	{
		this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
		this._Area = default(EntityRef<Area>);
		this._Dept = default(EntityRef<Dept>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUVID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string UserUVID
	{
		get
		{
			return this._UserUVID;
		}
		set
		{
			if ((this._UserUVID != value))
			{
				this.OnUserUVIDChanging(value);
				this.SendPropertyChanging();
				this._UserUVID = value;
				this.SendPropertyChanged("UserUVID");
				this.OnUserUVIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string UserFName
	{
		get
		{
			return this._UserFName;
		}
		set
		{
			if ((this._UserFName != value))
			{
				this.OnUserFNameChanging(value);
				this.SendPropertyChanging();
				this._UserFName = value;
				this.SendPropertyChanged("UserFName");
				this.OnUserFNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string UserLName
	{
		get
		{
			return this._UserLName;
		}
		set
		{
			if ((this._UserLName != value))
			{
				this.OnUserLNameChanging(value);
				this.SendPropertyChanging();
				this._UserLName = value;
				this.SendPropertyChanged("UserLName");
				this.OnUserLNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullTime", DbType="Bit NOT NULL")]
	public bool FullTime
	{
		get
		{
			return this._FullTime;
		}
		set
		{
			if ((this._FullTime != value))
			{
				this.OnFullTimeChanging(value);
				this.SendPropertyChanging();
				this._FullTime = value;
				this.SendPropertyChanged("FullTime");
				this.OnFullTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneExt", DbType="VarChar(10)")]
	public string PhoneExt
	{
		get
		{
			return this._PhoneExt;
		}
		set
		{
			if ((this._PhoneExt != value))
			{
				this.OnPhoneExtChanging(value);
				this.SendPropertyChanging();
				this._PhoneExt = value;
				this.SendPropertyChanged("PhoneExt");
				this.OnPhoneExtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(15)")]
	public string HomePhone
	{
		get
		{
			return this._HomePhone;
		}
		set
		{
			if ((this._HomePhone != value))
			{
				this.OnHomePhoneChanging(value);
				this.SendPropertyChanging();
				this._HomePhone = value;
				this.SendPropertyChanged("HomePhone");
				this.OnHomePhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(15)")]
	public string CellPhone
	{
		get
		{
			return this._CellPhone;
		}
		set
		{
			if ((this._CellPhone != value))
			{
				this.OnCellPhoneChanging(value);
				this.SendPropertyChanging();
				this._CellPhone = value;
				this.SendPropertyChanged("CellPhone");
				this.OnCellPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bday", DbType="Date")]
	public System.Nullable<System.DateTime> Bday
	{
		get
		{
			return this._Bday;
		}
		set
		{
			if ((this._Bday != value))
			{
				this.OnBdayChanging(value);
				this.SendPropertyChanging();
				this._Bday = value;
				this.SendPropertyChanged("Bday");
				this.OnBdayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(75)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptID", DbType="Char(10)")]
	public string DeptID
	{
		get
		{
			return this._DeptID;
		}
		set
		{
			if ((this._DeptID != value))
			{
				if (this._Dept.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDeptIDChanging(value);
				this.SendPropertyChanging();
				this._DeptID = value;
				this.SendPropertyChanged("DeptID");
				this.OnDeptIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int")]
	public System.Nullable<int> AreaID
	{
		get
		{
			return this._AreaID;
		}
		set
		{
			if ((this._AreaID != value))
			{
				if (this._Area.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAreaIDChanging(value);
				this.SendPropertyChanging();
				this._AreaID = value;
				this.SendPropertyChanged("AreaID");
				this.OnAreaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Equipment", Storage="_Equipments", ThisKey="UserUVID", OtherKey="UserUVID")]
	public EntitySet<Equipment> Equipments
	{
		get
		{
			return this._Equipments;
		}
		set
		{
			this._Equipments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_User", Storage="_Area", ThisKey="AreaID", OtherKey="AreaID", IsForeignKey=true)]
	public Area Area
	{
		get
		{
			return this._Area.Entity;
		}
		set
		{
			Area previousValue = this._Area.Entity;
			if (((previousValue != value) 
						|| (this._Area.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Area.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Area.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._AreaID = value.AreaID;
				}
				else
				{
					this._AreaID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Area");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dept_User", Storage="_Dept", ThisKey="DeptID", OtherKey="DeptID", IsForeignKey=true)]
	public Dept Dept
	{
		get
		{
			return this._Dept.Entity;
		}
		set
		{
			Dept previousValue = this._Dept.Entity;
			if (((previousValue != value) 
						|| (this._Dept.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Dept.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Dept.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._DeptID = value.DeptID;
				}
				else
				{
					this._DeptID = default(string);
				}
				this.SendPropertyChanged("Dept");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Equipments(Equipment entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipment")]
public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _EquipID;
	
	private string _UVUInvID;
	
	private string _OtherInvID;
	
	private System.Nullable<System.DateTime> _PurchDate;
	
	private System.Nullable<int> _ModelID;
	
	private System.Nullable<int> _EquipTypeID;
	
	private string _SerialNum;
	
	private System.Nullable<bool> _UserPrimaryComp;
	
	private string _UserUVID;
	
	private string _DeptID;
	
	private string _BldgID;
	
	private string _Room;
	
	private string _Comments;
	
	private string _Other;
	
	private System.Nullable<int> _AreaID;
	
	private System.Nullable<System.DateTime> _InvCheck;
	
	private EntityRef<Area> _Area;
	
	private EntityRef<Bldg> _Bldg;
	
	private EntityRef<Dept> _Dept;
	
	private EntityRef<EquipType> _EquipType;
	
	private EntityRef<Model> _Model;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquipIDChanging(int value);
    partial void OnEquipIDChanged();
    partial void OnUVUInvIDChanging(string value);
    partial void OnUVUInvIDChanged();
    partial void OnOtherInvIDChanging(string value);
    partial void OnOtherInvIDChanged();
    partial void OnPurchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPurchDateChanged();
    partial void OnModelIDChanging(System.Nullable<int> value);
    partial void OnModelIDChanged();
    partial void OnEquipTypeIDChanging(System.Nullable<int> value);
    partial void OnEquipTypeIDChanged();
    partial void OnSerialNumChanging(string value);
    partial void OnSerialNumChanged();
    partial void OnUserPrimaryCompChanging(System.Nullable<bool> value);
    partial void OnUserPrimaryCompChanged();
    partial void OnUserUVIDChanging(string value);
    partial void OnUserUVIDChanged();
    partial void OnDeptIDChanging(string value);
    partial void OnDeptIDChanged();
    partial void OnBldgIDChanging(string value);
    partial void OnBldgIDChanged();
    partial void OnRoomChanging(string value);
    partial void OnRoomChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnOtherChanging(string value);
    partial void OnOtherChanged();
    partial void OnAreaIDChanging(System.Nullable<int> value);
    partial void OnAreaIDChanged();
    partial void OnInvCheckChanging(System.Nullable<System.DateTime> value);
    partial void OnInvCheckChanged();
    #endregion
	
	public Equipment()
	{
		this._Area = default(EntityRef<Area>);
		this._Bldg = default(EntityRef<Bldg>);
		this._Dept = default(EntityRef<Dept>);
		this._EquipType = default(EntityRef<EquipType>);
		this._Model = default(EntityRef<Model>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int EquipID
	{
		get
		{
			return this._EquipID;
		}
		set
		{
			if ((this._EquipID != value))
			{
				this.OnEquipIDChanging(value);
				this.SendPropertyChanging();
				this._EquipID = value;
				this.SendPropertyChanged("EquipID");
				this.OnEquipIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UVUInvID", DbType="VarChar(20)")]
	public string UVUInvID
	{
		get
		{
			return this._UVUInvID;
		}
		set
		{
			if ((this._UVUInvID != value))
			{
				this.OnUVUInvIDChanging(value);
				this.SendPropertyChanging();
				this._UVUInvID = value;
				this.SendPropertyChanged("UVUInvID");
				this.OnUVUInvIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherInvID", DbType="VarChar(50)")]
	public string OtherInvID
	{
		get
		{
			return this._OtherInvID;
		}
		set
		{
			if ((this._OtherInvID != value))
			{
				this.OnOtherInvIDChanging(value);
				this.SendPropertyChanging();
				this._OtherInvID = value;
				this.SendPropertyChanged("OtherInvID");
				this.OnOtherInvIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchDate", DbType="Date")]
	public System.Nullable<System.DateTime> PurchDate
	{
		get
		{
			return this._PurchDate;
		}
		set
		{
			if ((this._PurchDate != value))
			{
				this.OnPurchDateChanging(value);
				this.SendPropertyChanging();
				this._PurchDate = value;
				this.SendPropertyChanged("PurchDate");
				this.OnPurchDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="Int")]
	public System.Nullable<int> ModelID
	{
		get
		{
			return this._ModelID;
		}
		set
		{
			if ((this._ModelID != value))
			{
				if (this._Model.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnModelIDChanging(value);
				this.SendPropertyChanging();
				this._ModelID = value;
				this.SendPropertyChanged("ModelID");
				this.OnModelIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipTypeID", DbType="Int")]
	public System.Nullable<int> EquipTypeID
	{
		get
		{
			return this._EquipTypeID;
		}
		set
		{
			if ((this._EquipTypeID != value))
			{
				if (this._EquipType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEquipTypeIDChanging(value);
				this.SendPropertyChanging();
				this._EquipTypeID = value;
				this.SendPropertyChanged("EquipTypeID");
				this.OnEquipTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNum", DbType="VarChar(100)")]
	public string SerialNum
	{
		get
		{
			return this._SerialNum;
		}
		set
		{
			if ((this._SerialNum != value))
			{
				this.OnSerialNumChanging(value);
				this.SendPropertyChanging();
				this._SerialNum = value;
				this.SendPropertyChanged("SerialNum");
				this.OnSerialNumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPrimaryComp", DbType="Bit")]
	public System.Nullable<bool> UserPrimaryComp
	{
		get
		{
			return this._UserPrimaryComp;
		}
		set
		{
			if ((this._UserPrimaryComp != value))
			{
				this.OnUserPrimaryCompChanging(value);
				this.SendPropertyChanging();
				this._UserPrimaryComp = value;
				this.SendPropertyChanged("UserPrimaryComp");
				this.OnUserPrimaryCompChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUVID", DbType="Char(10)")]
	public string UserUVID
	{
		get
		{
			return this._UserUVID;
		}
		set
		{
			if ((this._UserUVID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserUVIDChanging(value);
				this.SendPropertyChanging();
				this._UserUVID = value;
				this.SendPropertyChanged("UserUVID");
				this.OnUserUVIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptID", DbType="Char(10)")]
	public string DeptID
	{
		get
		{
			return this._DeptID;
		}
		set
		{
			if ((this._DeptID != value))
			{
				if (this._Dept.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDeptIDChanging(value);
				this.SendPropertyChanging();
				this._DeptID = value;
				this.SendPropertyChanged("DeptID");
				this.OnDeptIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BldgID", DbType="Char(2)")]
	public string BldgID
	{
		get
		{
			return this._BldgID;
		}
		set
		{
			if ((this._BldgID != value))
			{
				if (this._Bldg.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnBldgIDChanging(value);
				this.SendPropertyChanging();
				this._BldgID = value;
				this.SendPropertyChanged("BldgID");
				this.OnBldgIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room", DbType="VarChar(10)")]
	public string Room
	{
		get
		{
			return this._Room;
		}
		set
		{
			if ((this._Room != value))
			{
				this.OnRoomChanging(value);
				this.SendPropertyChanging();
				this._Room = value;
				this.SendPropertyChanged("Room");
				this.OnRoomChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
	public string Comments
	{
		get
		{
			return this._Comments;
		}
		set
		{
			if ((this._Comments != value))
			{
				this.OnCommentsChanging(value);
				this.SendPropertyChanging();
				this._Comments = value;
				this.SendPropertyChanged("Comments");
				this.OnCommentsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Other", DbType="VarChar(MAX)")]
	public string Other
	{
		get
		{
			return this._Other;
		}
		set
		{
			if ((this._Other != value))
			{
				this.OnOtherChanging(value);
				this.SendPropertyChanging();
				this._Other = value;
				this.SendPropertyChanged("Other");
				this.OnOtherChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaID", DbType="Int")]
	public System.Nullable<int> AreaID
	{
		get
		{
			return this._AreaID;
		}
		set
		{
			if ((this._AreaID != value))
			{
				if (this._Area.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAreaIDChanging(value);
				this.SendPropertyChanging();
				this._AreaID = value;
				this.SendPropertyChanged("AreaID");
				this.OnAreaIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvCheck", DbType="Date")]
	public System.Nullable<System.DateTime> InvCheck
	{
		get
		{
			return this._InvCheck;
		}
		set
		{
			if ((this._InvCheck != value))
			{
				this.OnInvCheckChanging(value);
				this.SendPropertyChanging();
				this._InvCheck = value;
				this.SendPropertyChanged("InvCheck");
				this.OnInvCheckChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Equipment", Storage="_Area", ThisKey="AreaID", OtherKey="AreaID", IsForeignKey=true)]
	public Area Area
	{
		get
		{
			return this._Area.Entity;
		}
		set
		{
			Area previousValue = this._Area.Entity;
			if (((previousValue != value) 
						|| (this._Area.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Area.Entity = null;
					previousValue.Equipments.Remove(this);
				}
				this._Area.Entity = value;
				if ((value != null))
				{
					value.Equipments.Add(this);
					this._AreaID = value.AreaID;
				}
				else
				{
					this._AreaID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Area");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bldg_Equipment", Storage="_Bldg", ThisKey="BldgID", OtherKey="BldgID", IsForeignKey=true)]
	public Bldg Bldg
	{
		get
		{
			return this._Bldg.Entity;
		}
		set
		{
			Bldg previousValue = this._Bldg.Entity;
			if (((previousValue != value) 
						|| (this._Bldg.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Bldg.Entity = null;
					previousValue.Equipments.Remove(this);
				}
				this._Bldg.Entity = value;
				if ((value != null))
				{
					value.Equipments.Add(this);
					this._BldgID = value.BldgID;
				}
				else
				{
					this._BldgID = default(string);
				}
				this.SendPropertyChanged("Bldg");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dept_Equipment", Storage="_Dept", ThisKey="DeptID", OtherKey="DeptID", IsForeignKey=true)]
	public Dept Dept
	{
		get
		{
			return this._Dept.Entity;
		}
		set
		{
			Dept previousValue = this._Dept.Entity;
			if (((previousValue != value) 
						|| (this._Dept.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Dept.Entity = null;
					previousValue.Equipments.Remove(this);
				}
				this._Dept.Entity = value;
				if ((value != null))
				{
					value.Equipments.Add(this);
					this._DeptID = value.DeptID;
				}
				else
				{
					this._DeptID = default(string);
				}
				this.SendPropertyChanged("Dept");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipType_Equipment", Storage="_EquipType", ThisKey="EquipTypeID", OtherKey="EquipTypeID", IsForeignKey=true)]
	public EquipType EquipType
	{
		get
		{
			return this._EquipType.Entity;
		}
		set
		{
			EquipType previousValue = this._EquipType.Entity;
			if (((previousValue != value) 
						|| (this._EquipType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EquipType.Entity = null;
					previousValue.Equipments.Remove(this);
				}
				this._EquipType.Entity = value;
				if ((value != null))
				{
					value.Equipments.Add(this);
					this._EquipTypeID = value.EquipTypeID;
				}
				else
				{
					this._EquipTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("EquipType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Equipment", Storage="_Model", ThisKey="ModelID", OtherKey="ModelID", IsForeignKey=true)]
	public Model Model
	{
		get
		{
			return this._Model.Entity;
		}
		set
		{
			Model previousValue = this._Model.Entity;
			if (((previousValue != value) 
						|| (this._Model.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Model.Entity = null;
					previousValue.Equipments.Remove(this);
				}
				this._Model.Entity = value;
				if ((value != null))
				{
					value.Equipments.Add(this);
					this._ModelID = value.ModelID;
				}
				else
				{
					this._ModelID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Model");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Equipment", Storage="_User", ThisKey="UserUVID", OtherKey="UserUVID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Equipments.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Equipments.Add(this);
					this._UserUVID = value.UserUVID;
				}
				else
				{
					this._UserUVID = default(string);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
